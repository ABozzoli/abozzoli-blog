---
const { page } = Astro.props;
const length = page.lastPage;
const pageNumbers = Array.from({ length }, (_, i) => i + 1);
const currentUrl = Astro.url.pathname;
const root = currentUrl.replace(/\/\d$/, "");

const ellipsedPageNumbers = (range = 0) => {
  /* Check to prevent cutting off pages if not needed */
  if (1 + range * 2 >= pageNumbers.length) {
    return { hiddenBefore: [], shownPages: pageNumbers, hiddenAfter: [] };
  }

  const index = pageNumbers.indexOf(page.currentPage);
  const start = Math.max(0, index - range);
  const end = index + range + 1;

  const hiddenBefore = pageNumbers.slice(0, start);
  const shownPages = pageNumbers.slice(start, end);
  const hiddenAfter = pageNumbers.slice(end);

  return { hiddenBefore, shownPages, hiddenAfter };
};

const getSkipText = (pages: number[]) => {
  if (pages.length === 1) return `Skipping page ${pages[0]}`;
  if (pages.length === 2) return `Skipping pages ${pages[0]} and ${pages[1]}`;
  return `Skipping pages from ${pages[0]} to ${pages[pages.length - 1]}`;
};

const { hiddenBefore, shownPages, hiddenAfter } = ellipsedPageNumbers(1);

/* Ref: https://www.htmhell.dev/adventcalendar/2024/14/ */
---

<nav aria-label="Pagination" inert={!(page.lastPage > 1)}>
  <ul class="pagination" role="list">
    <li class="arrow">
      <a role="link" href={page.url.first} aria-disabled={!page.url.first ? "true" : "false"}>
        <span class="visually-hidden">First page</span>
        <span aria-hidden="true">❮❮</span>
      </a>
    </li>
    <li class="arrow">
      <a role="link" href={page.url.prev} aria-disabled={!page.url.prev ? "true" : "false"}>
        <span class="visually-hidden">Previous page</span>
        <span aria-hidden="true">❮</span>
      </a>
    </li>
    {
      hiddenBefore.length > 0 && (
        <li>
          <div class="ellipses">
            <span class="visually-hidden">{getSkipText(hiddenBefore)}</span>
            <span aria-hidden="true">⋯</span>
          </div>
        </li>
      )
    }
    {
      shownPages.map((pageNumber) => (
        <li>
          <a href={`${root}/${pageNumber}`} aria-current={`${root}/${pageNumber}` === currentUrl ? "page" : undefined}>
            {pageNumber}
          </a>
        </li>
      ))
    }
    {
      hiddenAfter.length > 0 && (
        <li>
          <div class="ellipses">
            <span class="visually-hidden">{getSkipText(hiddenAfter)}</span>
            <span aria-hidden="true">⋯</span>
          </div>
        </li>
      )
    }
    <li class="arrow">
      <a role="link" href={page.url.next} aria-disabled={!page.url.next ? "true" : "false"}>
        <span class="visually-hidden">Next page</span>
        <span aria-hidden="true">❯</span>
      </a>
    </li>
    <li class="arrow">
      <a role="link" href={page.url.last} aria-disabled={!page.url.last ? "true" : "false"}>
        <span class="visually-hidden">Last page</span>
        <span aria-hidden="true">❯❯</span>
      </a>
    </li>
  </ul>
</nav>

<style lang="scss">
  .pagination {
    display: flex;
    justify-content: center;
    gap: 0.5rem;

    a,
    .ellipses {
      display: inline-block;
      height: 44px;
      width: 44px;
      flex-shrink: 0;
      display: flex;
      justify-content: center;
      align-items: center;

      &[aria-current="page"] {
        background-color: black;
        color: white;
        font-weight: bold;
      }

      &:not([aria-disabled="true"]):hover {
        background-color: black;
        color: white;
        text-decoration-line: none;
      }
    }

    @media (max-width: 768px) {
      li:not(.arrow):has(> :not([aria-current="page"])) {
        display: none;
      }
    }
  }
</style>
